I"Ú)<p><a href="http://jekyllrb.com/">Jekyll</a> is an interesting project, a well-architected throwback to a time before unnecessary dynamism reigned supreme.  In contrast to blog engines like Wordpress or Textile, Jekyll doesn‚Äôt attempt to do anything other than push raw content through a few simple filters out into the world in the form of static HTML files.  Jekyll‚Äôs <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">publication philosophy</a> is very much in line with my own, and I appreciate the work that‚Äôs gone into it.  It‚Äôs relatively widely used, and therefore much more stable and well-tested than anything I‚Äôd write on my own.  Given my <a href="http://twitter.com/mikewest/status/4605321990">recent experience</a>, I want something that will Just Work‚Ñ¢, and this looks like it.  I finished moving this site to Jekyll yesterday, and I‚Äôm quite happy with how it‚Äôs working‚Ä¶</p>

<p>It doesn‚Äôt fit me perfectly, though.  Here, I‚Äôll point to a few features that I think are missing, and a few design decisions that I think are worth reconsideration.  Happily, it‚Äôs an open source project, so I‚Äôll also be able to point to my fork of the project where I‚Äôm busy addressing these shortcomings.</p>

<h2 id="generated-pages-tags-and-archives">‚ÄúGenerated‚Äù Pages: Tags and Archives</h2>

<p>The biggest gap I see in Jekyll‚Äôs feature set is support for ‚Äúgenerated‚Äù pages (covered in <a href="http://github.com/mojombo/jekyll/issues#issue/16">Issue #16</a>).  HTML that Jekyll produces is tied one-to-one with files you create on the filesystem.  This has the appeal of simplicity, fails in a number of ways to support two quasi-dynamic things that I consider essential to the kind of sites Jekyll aims to produce: tags, and archives.</p>

<p><strong>Tags</strong> are a nice way of grouping content on a site, and surfacing that content to readers in an unobtrusive way.  Jekyll, out of the box, does a miserable job of making them available in templates.  <code class="highlighter-rouge">site.tags</code> gives you a list of <em>all</em> the site‚Äôs tags, <code class="highlighter-rouge">page.tags</code> gives you the tags for the current page, and that‚Äôs it.  That‚Äôs simply not enough structured data to do anything useful with; I want more.  ‚ÄúMore‚Äù, in my case, meaning two things: a separate page for each tag at <code class="highlighter-rouge">/tags/[TAG]</code>, listing each article that fits; and a page listing out all the tags on the site (in cloud form, if only because I‚Äôm <em>so</em> Web 2.0).  The latter is (painfully) possible out of the box, the former is not.</p>

<p>My solution (based heavily on <a href="http://matflores.com/">Matt Flores</a>‚Äô <a href="http://github.com/matflores/jekyll/commit/abd0491c451b77bd119a0071457a362c35e6c2f6">fork</a>) is available in the <a href="http://github.com/mikewest/jekyll/tree/tag_index">tag_index branch</a> of my Jekyll fork.  The implementation is very low-impact: simply add a <code class="highlighter-rouge">tag_detail.html</code> layout to your site‚Äôs <code class="highlighter-rouge">_layouts</code> directory.  Jekyll will auto-generate pages using that layout for each tag on your site, providing <code class="highlighter-rouge">page.tag</code> as a variable inside each as they‚Äôre rendered.  This allows you to dive into <code class="highlighter-rouge">site.tags</code> to pull out lists of articles in a very straightforward way.  Once rendered into HTML, the result is placed into a directory you specify via a configuration variable (<code class="highlighter-rouge">tag_root</code>).  This has worked brilliantly for me here on this site.</p>

<p><strong>Archive pages</strong> listing out content written during a certain period are another nice way of dividing up posts on a site.  Especially useful for sites with more than a few posts, it‚Äôs a mechanism for showing users posts that fit together temporally.  It‚Äôs nice to be able to see <a href="/2007">all of 2007‚Äôs posts</a>, for instance.  Or <a href="/2008/11">all posts from November of 2008</a>.</p>

<p>Again, I borrowed a bit of code from Matt Flores, brought it up to date with the latest Jekyll tag (0.5.4 at the time I‚Äôm writing this), and check it into the <a href="http://github.com/mikewest/jekyll/tree/archive">archive branch</a> of my fork.  Similarly to the tagging system above, archives depend on adding a few extra layouts.  <code class="highlighter-rouge">archive_yearly.html</code>, <code class="highlighter-rouge">archive_monthly.html</code>, and <code class="highlighter-rouge">archive_daily.html</code> are supported, and offer <code class="highlighter-rouge">page.year</code>, <code class="highlighter-rouge">page.month</code>, and <code class="highlighter-rouge">page.day</code>, which can be used to reference posts in <code class="highlighter-rouge">site.collated_posts</code>.  My <a href="http://github.com/mikewest/mikewest.org/blob/master/_layouts/archive_monthly.html"><code class="highlighter-rouge">archive_monthly.html</code></a> is indicative of how this can work.</p>

<p>Generated pages are written to <code class="highlighter-rouge">/[YEAR]/index.html</code>, <code class="highlighter-rouge">/[YEAR]/[MONTH]/index.html</code>, and <code class="highlighter-rouge">/[YEAR]/[MONTH]/[DAY]/index.html</code> if posts exist over the specified time period.</p>

<h2 id="filters">Filters</h2>

<p>Jekyll uses the <a href="http://www.liquidmarkup.org/">Liquid</a> templating engine, which isn‚Äôt exactly my first choice.  It‚Äôs a solid engine, as far as it goes, but it‚Äôs no <a href="http://jinja.pocoo.org/2/">Jinja2</a>.  Regardless, Jekyll has built in a number of useful filters that can be used to perform operations on text before it‚Äôs rendered.  <code class="highlighter-rouge">textilize()</code> is a good example of this, running text through a Textile parser, then writing the output instead of the original text.  It‚Äôs great!</p>

<p>Except, of course, for the fact that Textile is hideous.  :)  I much prefer to write Markdown formatted text (it‚Äôs just easier for me to read, really), so I was a bit miffed when I discovered that a Markdown counterpart to <code class="highlighter-rouge">textilize()</code> was simply missing.</p>

<p>A more robust system is being discussed (slowly) in <a href="http://github.com/mojombo/jekyll/issues#issue/19">Issue #19</a>.  I decided not to wait for a perfect solution, and simply added <code class="highlighter-rouge">markdownize()</code> in the <a href="http://github.com/mikewest/jekyll/tree/filters">filters branch</a> of my fork.  A trivial, but <em>very</em> necessary change.</p>

<h2 id="default-configuration-values">Default Configuration Values</h2>

<p>I really like the way that Jekyll expects posts to be formatted.  Each post lives in it‚Äôs own file, and each file begins with a YAML block specifying metadata such as titles, teasers, and layout style.  This allows you to configure each post separately, and lends quite a bit of flexibility to the end product.</p>

<p>As <a href="http://github.com/mojombo/jekyll/issues#issue/19">Issue #25</a> points out, it‚Äôd be nice if layout in particular could be specified at the site level as a default value.  Posts that need different layouts are (generally) few and far between, and a global configuration would make the most common case a bit simpler.</p>

<p>Henrik <a href="http://github.com/henrik/jekyll/commit/77bf31c42c25c2f87c215348a816b730104fe820">took a stab at a solution</a> to the problem, which I ran off with and improved upon in the <a href="http://github.com/mikewest/jekyll/tree/post_defaults">post_defaults branch</a> of my fork.  I‚Äôm waiting on someone to take a look at this work now, but I‚Äôm not holding my breath for it to be merged into the official release.</p>

<h2 id="problematic-design">Problematic Design</h2>

<p>Beyond gaps in the feature set, Jekyll does one or two things that I simply disagree with.</p>

<p>Jekyll tightly couples content and layout by assuming that both will exist together in a defined directory structure.  Leaving a bit of complexity to the side, a typical Jekyll site contains a <code class="highlighter-rouge">_posts</code> subdirectory filled to the brim with lovely raw content, and a <code class="highlighter-rouge">_layouts</code> directory filled with <a href="http://www.liquidmarkup.org/">Liquid</a>-based HTML templates.  The former is exclusively concerned with content, the latter exclusively with layout.</p>

<p>For the same reasons that we eventually started building websites without inline style information, separating the concerns of the site‚Äôs semantics from it‚Äôs layout and behavior, I don‚Äôt believe that these bits belong in the same repository.  At a minimum, I‚Äôd like to be able to deploy a version of my website‚Äôs look and feel without worrying about whether or not I tagged the release before or after adding a post.  The one activity has nothing to do with the other, and both ought be able to proceed in parallel.  Jekyll‚Äôs current implementation encourages mixing the two, which I don‚Äôt appreciate.  Instead, I prefer to run two distinct repositories: one containing <a href="http://github.com/mikewest/mgc/">pure content</a>, the other containing <a href="http://github.com/mikewest/mikewest.org/">site-specific layout and configuration</a>.  This feels cleaner to me.</p>

<p>The solution I‚Äôve hacked together is available in the <a href="http://github.com/mikewest/jekyll/tree/contentpath">contentpath branch</a> of my Jekyll fork.  I‚Äôve added a single configuration variable (<code class="highlighter-rouge">content_root</code>) that contains an absolute path to the directory containing the site‚Äôs content.  That directory will be parsed in it‚Äôs entirety (e.g. no <code class="highlighter-rouge">_posts</code> subdirectory is required).  If a <code class="highlighter-rouge">_posts</code> directory exists in the usual location (<code class="highlighter-rouge">[SITE_ROOT]/_posts/</code>) it will be parsed as well to ensure backwards compatibility.</p>

<p>I don‚Äôt expect this change to make it into the main tree, as it‚Äôs probably not interesting for Jekyll‚Äôs main audience of GitHub Pages users who <em>do</em> in fact very much want to deal with a single repository.  Moreover, when dealing with potentially malicious users, it‚Äôs not a brilliant idea to give them the ability to generate publicly accessible pages from <em>any</em> readable directory on a system.  For my use, however, it‚Äôs more or less perfect, and I‚Äôll do my best to keep it rebased on top of the latest Jekyll tags for anyone else who‚Äôs of the same mind.</p>

:ET