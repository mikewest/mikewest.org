I"Ý<p>Iâ€™ve got <a href="http://digital-web.com/articles/scope_in_javascript/" title="Mike West: 'Scope in JavaScript'">a new article</a> in the latest issue of <a href="http://digital-web.com/" title="Digital Web Magazine">Digital Web</a>, diving deeply into JavaScriptâ€™s concepts of scope and execution context.</p>

<p><a href="http://digital-web.com/articles/scope_in_javascript/" title="Mike West: 'Scope in JavaScript'">Scope in JavaScript</a> was originally an ode to the single most useful piece of the <a href="http://prototype.conio.net/" title="The Prototype JavaScript Framework">Prototype framework</a> â€“ the <code class="highlighter-rouge">bind</code> method.  I wanted to discuss in detail how <code class="highlighter-rouge">bind</code> makes it possible to have interesting and readable object-oriented code, while at the same time embracing event handlers and <code class="highlighter-rouge">setTimeout</code> to control your codeâ€™s execution.  The issue is simply that event handlers execute your code in a context outside your objects, which makes the <code class="highlighter-rouge">this</code> keyword confusing at best, and flat-out wrong at worst.  <code class="highlighter-rouge">bind</code> is an elegant solution to the problem, and the article concludes with a deep dive into a simplified version of that function to tease out exactly what it does, and how it works.</p>

<p>I found, however, that the article was mostly incomprehensible to those without a firm grounding in the issues of scope and execution context, and the lesser-known ways of manipulating execution context (<code class="highlighter-rouge">apply</code> and <code class="highlighter-rouge">call</code>).  In an effort to give that audience something to sink their teeth into, I added a good amount of discussion of the basic concepts of scope, and what an execution context really means.  I hope Iâ€™ve struck a good balance between the two, and that the article builds a solid foundation as it goes.</p>

<p>If youâ€™re interested in this sort of thing, read <a href="http://digital-web.com/articles/scope_in_javascript/" title="Mike West: 'Scope in JavaScript'">Scope in JavaScript</a>, and let me know what you think.  The comments should be interesting.  :)</p>

:ET