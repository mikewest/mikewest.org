I"Ð<p><a href="http://angularjs.org/">AngularJS</a>â€™s <a href="https://groups.google.com/forum/?fromgroups#!topic/angular/NUT9q_fjMJQ">latest release candidate</a> is the first
framework Iâ€™ve seen that cleanly supports a <a href="https://mikewest.org/2011/10/content-security-policy-a-primer">content security policy</a>
that restricts usage of <code class="highlighter-rouge">eval()</code>, <code class="highlighter-rouge">new Function()</code>, and the like. Iâ€™m thrilled
to see this happening, and itâ€™s a testament to the priority that the Angular
developers place on security. CSP is quite simply one the best XSS-protection
mechanisms available to developers these days in modern browsers. The more
frameworks that hop on board, the faster sites can start adopting CSP, and
the safer weâ€™ll all be on the net.</p>

<p>All that said, the implementation isnâ€™t as complete as it could be. Angular
requires that the developer manually opt into CSP-friendly mode via the
<a href="http://docs.angularjs.org/api/angular.module.ng.$compileProvider.directive.ngCsp"><code class="highlighter-rouge">ng-csp</code></a> directive. This is error-prone at best, and introduces
complexity that would be better hidden away inside the framework. The Angular
developers recognize this shortfall, and are <a href="https://twitter.com/#!/IgorMinar/status/197329318249111552">explicitly requesting</a>
some sort of feature detection API that would allow frameworks to query the
currently active policy to determine its boundaries, and fork their
implementation accordingly.</p>

<p>This does seem like a great addition to the spec; Iâ€™d suggest the following
implementation:</p>

<p>Add <code class="highlighter-rouge">document.[prefix]contentSecurityPolicy</code> as an object that exists in
browsers that support CSP. This would enable trivial feature detection of CSP
as a whole, which would enable frameworks to make intelligent decisions about
how to proceed through the following use cases:</p>

<ol>
  <li>
    <p>Is a policy enabled? If not, perhaps Iâ€™d like to set one via <code class="highlighter-rouge">meta</code>
injection.</p>

    <p><code class="highlighter-rouge">document.contentSecurityPolicy.active</code> is a boolean property: <code class="highlighter-rouge">true</code> if
a policy is set, <code class="highlighter-rouge">false</code> otherwise.</p>
  </li>
  <li>
    <p>Can I execute <code class="highlighter-rouge">eval()</code> or use <code class="highlighter-rouge">new Function()</code>?</p>

    <p><code class="highlighter-rouge">document.contentSecurityPolicy.isWhitelisted('script-src', 'unsafe-eval')</code>
returns <code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">unsafe-eval</code> has been defined for the <code class="highlighter-rouge">script-src</code>
directive.</p>
  </li>
  <li>
    <p>Can I embed a <code class="highlighter-rouge">data:</code> image or frame?</p>

    <p><code class="highlighter-rouge">document.contentSecurityPolicy.isWhitelisted('image-src', 'data:')</code> and
<code class="highlighter-rouge">document.contentSecurityPolicy.isWhitelisted('frame-src', 'data:')</code></p>
  </li>
  <li>
    <p>Can I include Google Analytics?</p>

    <p><code class="highlighter-rouge">document.contentSecurityPolicy.isWhitelisted('script-src', 'https://ssl.google-analytics.com')</code>
(Note that <code class="highlighter-rouge">isWhitelisted</code> should do the hard work of dealing with
wildcards. This example should return <code class="highlighter-rouge">true</code> if <code class="highlighter-rouge">*.google-analytics.com</code>
is whitelisted.)</p>
  </li>
  <li>
    <p>Are reports being sent? If so, where are they going?</p>

    <p>The <code class="highlighter-rouge">document.contentSecurityPolicy.reportUri</code> property is either
<code class="highlighter-rouge">undefined</code> if no <code class="highlighter-rouge">report-uri</code> directive is set, and a URI if the
directive is set.</p>
  </li>
</ol>

<p>This seems like a reasonable first pass at a strawman for discussion. Thanks to
<a href="http://paulirish.com/">Paul Irish</a>, <a href="http://ericbidelman.com/">Eric Bidelman</a>, and <a href="http://petelepage.com/">Pete LePage</a> for
walking through this with me.</p>

<p>What do you think?</p>

:ET