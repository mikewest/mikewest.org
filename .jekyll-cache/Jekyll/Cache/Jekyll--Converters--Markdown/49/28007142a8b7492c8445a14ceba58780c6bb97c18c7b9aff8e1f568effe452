I"<p>When you start Chrome, it attempts to connect to three random domains like <code class="highlighter-rouge">http://aghepodlln/</code> or <code class="highlighter-rouge">http://lkhjasdnpr/</code>. I’ve seen a <a href="http://stackoverflow.com/questions/7464378/why-is-google-chrome-pinging-mdioussrvd-and-other-random-hosts-that-dont-reso">few</a> <a href="http://www.freesmug.org/forum/t-433541/chromium-chrome-and-mysterious-server-connections">theories</a> about why exactly this happens that brush up against the nefarious. The true rationale is incredibly mundane: hopefully this short summary will clear things up.</p>

<p>The goal of the requests is to determine if you’re currently on a network that intercepts and redirects requests for nonexistent hostnames. For example, it’s not at all uncommon for ISP to transparently redirect failed DNS lookups in order to convert requests like <code class="highlighter-rouge">http://text/</code> into requests for <code class="highlighter-rouge">http://your.helpful.isp/search?q=text</code>. Leaving aside a discussion of the rightness or wrongness of these “helpful” activities, this behavior causes problems for Chrome. Specifically, it breaks some heuristics the Omnibox uses to determine whether a user means to <em>search</em> for a specific term, or to visit a non-standard domain name.</p>

<p>Google’s internal network is a good example of how this can cause problems. Internally, a short-link service named “go” makes sharing memorable links straightforward. If I type “go” in Chrome’s Omnibox and hit enter, it’s not exactly clear whether I mean to visit <code class="highlighter-rouge">http://go/</code> or to search for “Go” (which is an interesting programming language, by the way). Chrome does its best to do The Right Thing™ in response to this sort of user input by executing a search, and then, in the background, executing a <code class="highlighter-rouge">HEAD</code> request for the potential domain. If the server responds, Chrome will display an infobar, asking if you meant to navigate to <code class="highlighter-rouge">http://go/</code>, and it will remember your response for future reference.</p>

<p>As you can see, this feature is completely broken if your ISP intercepts all such requests: you’d get infobars on every one-word search. So Chrome checks things out at startup, and whenever your IP address changes. And, Chrome is beautifully open-source, so let’s take a quick look at the very straightforward implementation:</p>

<p><a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/intranet_redirect_detector.h&amp;exact_package=chromium&amp;ct=rc&amp;cd=1&amp;sq="><code class="highlighter-rouge">IntranetRedirectDetector</code></a> is the place to start. When Chrome starts up, it creates an <code class="highlighter-rouge">IntranetRedirectorDetector</code> object. This sets up a short delay (currently hard-coded to 7 seconds) in order to ensure that it doesn’t get in the way of time-critical startup activities, and then calls <a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/intranet_redirect_detector.cc&amp;l=63"><code class="highlighter-rouge">IntranetRedirectDetector::FinishSleep()</code></a> where the real work begins. This method <a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/intranet_redirect_detector.cc&amp;l=79">generates three random domain names</a>, and kicks off asynchronous <code class="highlighter-rouge">HEAD</code> requests to each in such a way that <a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/intranet_redirect_detector.cc&amp;l=87">they don’t generate cache entries, and don’t save cookies</a>. As each of these requests completes, <a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/intranet_redirect_detector.cc&amp;l=95"><code class="highlighter-rouge">IntranetRedirectDetector::OnURLFetchComplete()</code></a> is called to record the result. If any two of the three requests resolve to the same host, that host is stored as the network’s “redirect origin”. Easy.</p>

<p>This information is used in <a href="http://code.google.com/codesearch#OAMlx_jo-ck/src/chrome/browser/alternate_nav_url_fetcher.cc&amp;l=214"><code class="highlighter-rouge">AlternateNavURLFetcher</code></a> to determine whether or not an infobar should be shown for a specific Omnibox-generated search. If the <code class="highlighter-rouge">HEAD</code> request returns the same site as the redirect origin Chrome saw at startup, then it’s ignored. If it’s a different origin, then a helpful infobar might be in order.</p>

<p>So there you have it. Chrome makes three requests to random domains just after startup in order to provide its Omnibox heuristics with enough information to correctly work out a user’s intent. These requests are not sending your valuable data anywhere for nefarious purposes, nor are they useful for tracking purposes. The requests happen in order to fix <a href="http://crbug.com/18942">crbug.com/18942</a>, and for no other reason.</p>

:ET