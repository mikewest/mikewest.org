I"Œ<p>Sam Ruby‚Äôs ‚Äú<a href="http://www.intertwingly.net/blog/2007/01/03/OpenID-for-non-SuperUsers" title="Sam Ruby: 'OpenID for non-SuperUsers">OpenID for non-SuperUsers</a>‚Äù distills the process of
<a href="http://www.intertwingly.net/blog/2007/01/03/OpenID-for-non-SuperUsers#MasterOfYourDomain">setting up one‚Äôs own OpenID server</a> with <a href="http://siege.org/projects/phpMyID" title="phpMyID: A standalone, single user, OpenID Identity Provider">phpMyID</a> in such a clear and
concise manner, that I couldn‚Äôt help but <a href="https://mikewest.org/open_id/" title="Mike West's OpenID Server">implement it myself</a>.  I‚Äôve taken his
instructions, and turned them into a cut and past operation for anyone whose
website is hosted on a server with access to Subversion.  When you‚Äôre
finished, you‚Äôll be the proud owner of a bleeding-edge OpenID server running
at http://yourdomain.com/open_id/.</p>

<p>To begin, SSH into your server, and change to the document root of your
website.  For example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~/web/public/
</code></pre></div></div>

<p>Then run the following (very long) command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clear;mkdir ./open_id/;cd ./open_id/;read -p "Username: " USER;read -sp "Password: " PASS;echo;echo "Loading up the Files from the remote repository:";echo "t" &gt; ./temp_file_to_accept_cert_non-interactively;svn export -q https://www.siege.org/svn/oss/phpMyID/trunk/MyID.php &lt; ./temp_file_to_accept_cert_non-interactively &gt; /dev/null 2&gt;&amp;1;echo 'Success.';echo 'The username and password you entered will be used to configure the OpenID server:';HASH=`echo -n "$USER:phpMyID:$PASS" | openssl md5`;NICE="\$new='\$profile=array(\"auth_username\"=&gt;\"$USER\",\"auth_password\"=&gt;\"$HASH\");';if (/^\#\\\$profile/) { \$_ = \$new; }";perl -pi.bak -e "$NICE" MyID.php;USER='';PASS='';mv MyID.php index.php;rm temp_file_to_accept_cert_non-interactively;rm MyID.php.bak;echo 'Success.';
</code></pre></div></div>

<p>You‚Äôll be prompted for a username, and a password.  Enter each in turn, and then sit back and relax while the script runs.</p>

<p>That‚Äôs it!</p>

<h2 id="next-steps">Next Steps</h2>

<p>Once you‚Äôve got the server installed correctly, <a href="http://www.openidenabled.com/resources/openid-test/checkup" title="Test your OpenID Setup">test it out</a>.  Then
<a href="http://www.intertwingly.net/blog/2007/01/03/OpenID-for-non-SuperUsers#claimYourBlog">head back over to Sam‚Äôs article</a> to set up a clean delegation to
your server from your main blog or homepage URL.  You‚Äôll have to edit your
site‚Äôs template a bit, which isn‚Äôt something I can write a generic script for.
But it‚Äôs easy, so you‚Äôll do fine without me.</p>

<h2 id="troubleshooting">Troubleshooting</h2>

<ul>
  <li>
    <p><strong>Error</strong>: ‚ÄúMissing expected authorization header.‚Äù  If you get this
error, you‚Äôre probably running PHP as a CGI, and not as an Apache module.
In this case, the authentication headers don‚Äôt get created correctly, and
the phpMyID server can‚Äôt understand the login requests.</p>

    <p>To fix the problem, we‚Äôll write a corrective <code class="highlighter-rouge">.htaccess</code> file by running
the following commands in the same directory where your phpMyID server
lives (<code class="highlighter-rouge">~/web/public/open_id/</code> in our example):</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 'RewriteEngine on' &gt;&gt; .htaccess
echo 'RewriteCond %{HTTP:Authorization} !^$' &gt;&gt; .htaccess
echo 'RewriteCond %{QUERY_STRING} openid.mode=authorize' &gt;&gt; .htaccess
echo 'RewriteCond %{QUERY_STRING} !auth=' &gt;&gt; .htaccess
echo 'RewriteCond %{REQUEST_METHOD} =GET' &gt;&gt; .htaccess
echo 'RewriteRule (.*) %{REQUEST_URI}?%{QUERY_STRING}&amp;auth=%{HTTP:Authorization} [L]' &gt;&gt; .htaccess
</code></pre></div>    </div>
  </li>
</ul>

:ET