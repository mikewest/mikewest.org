I"Ï<p>DataRequestor is a JavaScript wrapper for the <code class="highlighter-rouge">XMLHttpRequest</code> object that enables the trivial implementation of dynamic interfaces without the painful necessity for a complete page-refresh to talk to the server. In other words: Ajax without the confusing API.</p>

<h2 id="how-can-you-use-datarequestor">How can you use DataRequestor?</h2>

<p>When building applications, the most typical Ajaxy sort of thing I find myself doing is sending off data to a server-side script, and then sticking the resulting HTML directly into some element on the page. DataRequestor makes this process absolutely trivial, and enables quite a bit more functionality with minimal effort.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var req = new DataRequestor();
req.setObjToReplace('objID');
req.getURL('/path/to/my/file.php');
</code></pre></div></div>

<p>Those three lines build an <code class="highlighter-rouge">XMLHtmlRequest</code> object, grab the relevant data from the server, and use that information to replace the <code class="highlighter-rouge">innerHTML</code> of an element with id â€˜<code class="highlighter-rouge">objID</code>â€™. Trivial, right?</p>

<p>What if we wanted to do something else when the dataâ€™s loaded? Instead of replacing an elementâ€™s <code class="highlighter-rouge">innerHTML</code>, maybe we want to do some crazy JavaScript stuff once the dataâ€™s finished loading. Typically, this would involve being annoyed at the <code class="highlighter-rouge">XMLHttpRequest</code> objectâ€™s rather irritating callback structure. Happily, DataRequestor wraps this complexity in a warm blanket of event-driven goodness:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>req.onload = function (data, obj) {
    // Insert crazy JavaScript stuff here!
}
</code></pre></div></div>

<p>DataRequestor is a solid, stable, and event-driven JavaScript class that you can simply drop into a page and start running with. It makes <code class="highlighter-rouge">XMLHTTPRequest</code>â€™s functionality available in a way that doesnâ€™t make my brain hurt, and hopefully it will do the same for you.  <a href="http://mikewest.org/archive/datarequestor/">Download DataRequestor.js</a> and browse through the code.  Itâ€™s well commented; use cases and instructions abound.</p>

<h2 id="how-can-i-get-it">How can I get it?</h2>

<p>You may download the <a href="http://github.com/mikewest/datarequestor/tree/master">current stable version (1.6) of DataRequestor.js <strong>right here</strong></a>.  Howâ€™s that for convenience?</p>

<h2 id="future-plans">Future Plans</h2>

<p><strong>Update, 2008-10-18</strong>: Despite well intentioned promises in the past, there are no future plans.  Iâ€™ve released this project under the MIT license, and <a href="http://github.com/mikewest/datarequestor/tree/master">placed the code on GitHub</a> for you to fork at your leisure.</p>

<p><del style="text-decoration: line-through;">The landscape has changed a lot since I released DataRequestor in March, 2005.  Frameworks have appeared that do everything DataRequestor does, and I certainly donâ€™t have the time or desire to compete with them on a feature-for-feature basis.  Happily, I think thatâ€™s a feature, not a bug.  :)</del></p>

<p><del style="text-decoration: line-through;">I believe thereâ€™s room for, and demand for, a simple library that does the bare minimum in terms of enabling Ajaxy interactions in existing applications.  I think the API that DataRequestor exposes is clear, concise, and trivial to implement.  In short, itâ€™s not going to disappear.</del></p>

<p><del style="text-decoration: line-through;">In the next couple of weeks, Iâ€™ll be making some changes to DataRequestorâ€™s backend in order to leverage some of the incredible work being done on <a href="http://developer.yahoo.com/yui/">Yahooâ€™s User Interface library</a>.  Iâ€™ll be pulling pieces of that libraryâ€™s code to increase DataRequestorâ€™s overall stability and elegance, while keeping the external interface the same.  Just like this 1.6 release, 2.0 will be a drop-in replacement for any previous version of DataRequestor.  Iâ€™ll be releasing some new features with that release (foremost: automatically repeated requests for timed site updates), and offering an alternate execution path Iâ€™ve been thinking about, but all your current code will work just the way it always has.  Weâ€™ll see where it goes from there.</del></p>

<h2 id="release-notes">Release Notes</h2>

<h3 id="changes-in-version-161">Changes in Version 1.6.1</h3>
<ul>
  <li>Removed <em>debug code</em> that broke the whole library in every browser that didnâ€™t have Firebug installed.  I hate being a moron.  :)</li>
</ul>

<h3 id="changes-in-version-16">Changes in Version 1.6</h3>
<ul>
  <li>Fixed major bug with <code class="highlighter-rouge">addArgsFromForm</code>; it now properly reads form variables anywhere under a <code class="highlighter-rouge">FORM</code> elementâ€™s DOM tree, instead of simply those that are the <code class="highlighter-rouge">FORM</code>â€™s direct children.</li>
  <li>Changed the internal handling of get and post variables to avoid some spurious get and post variables caused by other scriptsâ€™ overzealous addition of methods via <code class="highlighter-rouge">.prototype</code>.</li>
  <li>Better handling of certain error situations (calling <code class="highlighter-rouge">onfail</code> to handle unexpected exceptions, etc.)</li>
  <li>Moved handling of strangely cased <code class="highlighter-rouge">onLoad</code>, <code class="highlighter-rouge">onFail</code>, etc. out of callback function, into <code class="highlighter-rouge">getURL</code>.</li>
  <li>Add ability to deal with Mozilla-based browserâ€™s <code class="highlighter-rouge">NS_ERROR_NOT_AVAILABLE</code> error.</li>
  <li>Trigger an <code class="highlighter-rouge">onfail</code> event, or throw an error if the browser is disconnected from the internet when a request is made.</li>
</ul>

:ET