I"Ù#<p>Yesterday, I talked a little bit about the ways in which events could be handled across browsers in order to pave the way for a more in-depth discussion of the various methods by which we can enable a true behavioral layer on a website without corrupting the pristine semantic layer we‚Äôve already perfected. So now we‚Äôve got a strategy in place for hooking into our DOM tree: we add event handlers to elements on the page, and use those triggers to generate new and interesting behaviors. Simple enough. But we need at least one more basic concept before we can really start making leaps forward in terms of interesting behaviors: encapsulation.</p>

<p>Let‚Äôs say, for instance, that we wanted to use the <a href="/2005/03/event-handlers-and-other-distractions">table striping code</a> outlined in yesterday‚Äôs article. That defines three functions: <code class="highlighter-rouge">stripeTable</code>, <code class="highlighter-rouge">stripeAllTables</code>, and <code class="highlighter-rouge">handleEvent</code>. All of these functions go directly into what‚Äôs called the ‚ÄúGlobal Namespace‚Äù. This is a fancy way of saying that they‚Äôre defined everywhere. I could call <code class="highlighter-rouge">stripeTable</code> within any other JavaScript function I created, which - generally speaking - is a good thing.</p>

<p>However, there‚Äôs a danger here of polluting the global namespace with functions and variables that really shouldn‚Äôt be there. What if I needed another JavaScript function that swapped out a picture of a plain dining-room table with a picture of a colorfully striped dining-room table? I‚Äôd end up with two functions that would naturally be named <code class="highlighter-rouge">stripeTable</code>, and that would indeed cause problems! This example is, naturally, a bit contrived, but the danger is real, especially once we get around to building reusable components that can be simply included into a page for some effect. We‚Äôll want to ensure that the functions we define for our component don‚Äôt mesh badly with anyone else‚Äôs components. So how can we get around this sort of problem?</p>

<p>Simple: we create JavaScript objects. I‚Äôll outline how to do that, and it‚Äôs going to take us a bit far afield from the initial discussion of namespaces. Trust me, the diversion is worth it, if a bit long and boring.</p>

<p>So. Object-oriented programming is all the rage these days, and it‚Äôs a little known fact that JavaScript is remarkably proficient at defining reusable components that can be dynamically created and modified in your applications. Let‚Äôs look at the syntax for a really simple object:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function MyObject() {
    var self = this;

    self.setValue = function (value) {
        self.value = value;
    }
    self.getValue =  function() {
        return self.value;
    }

    self.value = 0;
}
</code></pre></div></div>

<p>That looks a lot like a function definition. In fact, it <strong>is</strong> a function definition. What gives? The simple explanation is that JavaScript can treat functions like other languages treat objects. There are <a href="http://www.crockford.com/javascript/javascript.html">more complicated explanations</a>, but I‚Äôll leave those aside in the interests of simplicity. Just flow with the syntax, it‚Äôll quickly become second nature.</p>

<p>So, what‚Äôs happening here? In a nutshell, we‚Äôre creating an object definition (a <code class="highlighter-rouge">class</code> in the lingo of Object-Oriented programming). The overused, but fairly accurate, example that I heard over and over in school goes something like this: The object definition (<code class="highlighter-rouge">class</code>) acts very much like a building‚Äôs blueprint. An architect draws up a blueprint that details exactly how a building is going to look, what it‚Äôs made out of, and how it works. Given a blueprint, we could build fifty houses, all with exactly the same features.</p>

<p>In the same way, the function MyObject allows us to create an arbitrary number of <code class="highlighter-rouge">instances</code>: actual, usable objects. The syntax for that is probably familiar to you:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var anInstance = new MyObject();
</code></pre></div></div>

<p>This bit of code is using the definition we wrote for MyObject to create an <code class="highlighter-rouge">instance</code> of that <code class="highlighter-rouge">class</code>.<br />
Cool, eh? So let‚Äôs look a little more closely at our blueprint to see what we can do with this newly-created instance.</p>

<p>The first line of the definition is something I just habitually do: <code class="highlighter-rouge">var self = this;</code>. JavaScript has some weird <a href="http://www.crockford.com/javascript/private.html">scoping issues</a> that this seems to resolve. We‚Äôll use <code class="highlighter-rouge">self</code> to refer to the particular instance of our object that we‚Äôre currently working with. In some sense, it‚Äôs like the address of each house that we‚Äôve created using our blueprint. Each house starts out the same, with empty cupboards and closets; each house quickly gets filled with tons and tons of distinct stuff. We might get confused about which house <strong>our</strong> stuff was in if it wasn‚Äôt for the street address that uniquely distinguishes my house from your house. In the same way, <code class="highlighter-rouge">self</code> provides a mechanism for referring to the object we‚Äôre currently working inside, so that our object definition can be nicely generic.</p>

<p>With <code class="highlighter-rouge">self</code> out of the way, let‚Äôs look at the next two groups of code. Each follows the same pattern:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>self.&lt;NAME&gt; = function(...) {
    // Function definition
}
</code></pre></div></div>

<p>What we‚Äôre doing here is defining <code class="highlighter-rouge">methods</code> for our objects. These methods hang off our object, and can be executed by using the dot operator, like <code class="highlighter-rouge">anInstance.getValue()</code>. If you‚Äôve used Java, this all makes perfect sense to you. If not, well, keep reading. :)</p>

<p>In this case, we‚Äôre creating two functions: <code class="highlighter-rouge">setValue</code>, which accepts a single argument, and assigns whatever value gets passed in to a local variable (more about that in a moment), and <code class="highlighter-rouge">getValue</code>, which simply returns the value that was previously set. The last little bit of code defines the local variable I mentioned a moment ago, and sets it‚Äôs initial value to 0. We‚Äôll talk about these sorts of variables more in a later article, for the moment, let‚Äôs just say that this value is specific to the particular instance of MyObject that we‚Äôre working with. Some code might help:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var anInstance      = new MyObject(); // Create an instance of our object.
var anotherInstance = new MyObject(); // Create another, separate, instance.

anInstance.setValue(1);      // Call the setValue method to set a value
anotherInstance.setValue(2); // Ditto.

alert(anInstance.getValue());      // This will pop up "1"
alert(anotherInstance.getValue()); // This will pop up "2"
</code></pre></div></div>

<p>Hopefully that makes sense. If not, don‚Äôt worry. It‚Äôll come up again in another article.</p>

<p>So, with all that background out of the way, let‚Äôs actually address the topic that this article began with: How do we create modular components that don‚Äôt jump all over the names of other functions you might want to define? The answer‚Äôs probably obvious at this point. We create an object definition that contains our functions, and use that as our namespace. To use our example from yesterday, we might do something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function ZebraTables() {
    var self = this;

    self.stripeTable = function (table) {
        // Throw the stripe table code in here
    }

    self.stripeAllTables = function () {
        // Throw the stripe all tables code in here, making sure to replace
        // the reference to `stripeTable` with `self.stripeTable`.
    }

    handleEvent(window, "load", self.stripeAllTables);
}
</code></pre></div></div>

<p>This would create a ZebraTables object definition for us that wouldn‚Äôt pollute the global namespace, and could be easily included on any webpage we desired. One more change should probably be made (removing <code class="highlighter-rouge">handleEvent</code> from the global space, and making it a method of the <code class="highlighter-rouge">window</code> object), but it requires a discussion of prototypes that we‚Äôre just going to have to get to later.</p>

<p>An <a href="/projects/files/EventHandler/objectOrientedEventHandlingExample.html">example of this technique</a> is available. :)</p>

:ET