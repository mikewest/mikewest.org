I"(<p>I liked many things about working at Yahoo.  I‚Äôm coming to realize that what I (in hindsight) like <em>most</em> is probably the piece of software I thought about the <em>least</em> positively, namely Yahoo‚Äôs mostly centralized and completely open bug tracking system: Bugzilla.  We abused it more than a bit, attempting to layer task and project management on top of a system that wasn‚Äôt really designed to support it, but all told, Bugzilla made my work life better.</p>

<p>As a generic employee, the centralization of bug tracking meant that I was able to quickly and easily file bugs against any Yahoo property.  I didn‚Äôt have to know who was responsible for a project in order to raise bugs against it.  I didn‚Äôt need the group responsible for a project to know <em>me</em>.  When I saw an issue on a Yahoo site, I filed a bug against the project, and knew <em>someone</em> with the capability to fix the issue would be notified about it.  Bugzilla minimized the friction caused by unclear answers to the question ‚ÄúI found a bug, now what?‚Äù.  Instead of sending out a few emails, looking for someone to stick with a problem, it gave everyone in the company a clear ‚Äúnext step‚Äù, and (in the best cases) fostered a corporate culture of <em>reporting</em> bugs rather than avoiding them.</p>

<p>As a developer, Bugzilla meant that <em>I</em> didn‚Äôt have to keep the list of bugs on my projects.  The bug database was maintained for me, triaged and prioritized by my managers, and brutally honest.  Every bug that was reported against News sat in my queue, staring at me pleadingly until I fixed it.  I made appropriate comments on each bug when necessary, which simple integration with CVS made trivial, with the cumulative effect that I didn‚Äôt worry about forgetting to fix something, or losing track of a bug‚Äôs status.  Everything was maintained for me, removing a burden from my shoulders.</p>

<p>This isn‚Äôt to say Bugzilla was perfect.  It was a bit of a mess, honestly, often difficult to use, full of confusing forms and confused categorizations, and plagued by an understaffed team of developers who played with the UI far too often.  For these reasons and more, it probably annoyed me more than any piece of software at Yahoo, but it‚Äôs existence was hugely advantageous.  In hindsight, I‚Äôm coming to consider this a critical component of any development team; a central bug tracking system provides <strong>visibility</strong> and <strong>accountability</strong> in a way difficult (impossible) to replicate with personal to-do lists and email.</p>

<p>Don‚Äôt read this as an endorsement of Bugzilla in particular, but as an endorsement of the concept of bug tracking.  Working without a centralized bug database makes your work life more difficult for no good reason.  It‚Äôs something I highly suggest that you avoid.</p>

<p>If you‚Äôd like to get started quickly with an externally hosted bug tracking system, I‚Äôve heard good things about <a href="http://lighthouseapp.com/">Lighthouse</a> and <a href="http://sifterapp.com/">Sifter</a>.  I‚Äôm still looking for a locally hosted system that I like, but I‚Äôve been recommended <a href="http://www.mantisbt.org/">Mantis</a>, <a href="http://www.fogcreek.com/FogBUGZ/">FogBugz</a>, and, of course, <a href="http://www.bugzilla.org/">Bugzilla</a>.  Honestly, even a hand-maintained text file in <a href="http://github.com/henrik/tasks.tmbundle/tree/master">Tasks</a> format that you print out and pin to the wall for people to write on is better than nothing.  For the sake of your own sanity, use <em>something</em>.</p>

:ET