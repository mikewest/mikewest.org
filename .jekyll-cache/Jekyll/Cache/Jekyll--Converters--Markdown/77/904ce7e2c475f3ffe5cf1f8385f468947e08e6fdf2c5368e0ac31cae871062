I"<p><a href="http://nginx.net/">Nginx</a> is a brilliant little HTTP server that I’m using on this website to quickly serve static content, and quickly proxy traffic through to the <a href="http://github.com/mikewest/fallow/tree">ruby backend</a> when static content just won’t do.  It’s been a breeze to set up, and quite stable in my (limited) experience.  There’s just one thing bothering me about it at the moment: it doesn’t completely support the content-based cache headers I’d like to see.  Specifically, it doesn’t do <code class="highlighter-rouge">Etag</code>s for content it serves, and it <a href="http://markmail.org/message/xiungpgciwvocl4w">doesn’t look like Igor’s going to implement it</a>.</p>

<p>I see the complete lack of <code class="highlighter-rouge">Etag</code> support as an oversight.  It’s more granular than <code class="highlighter-rouge">Last-Modified</code>, which is only accurate to the second, and only measures change along the axis of <em>time</em>; <code class="highlighter-rouge">touch</code>ing a file doesn’t change it’s content, but would force a cache miss when the cache is based on nothing but timestamp.  <code class="highlighter-rouge">Etag</code>s, on the other hand, are <em>content</em>-based identifiers that provide a mechanism for confirmation that the content of the file you’re reading is accurate, regardless of inconsequential fiddling or deployment on the server.</p>

<p>That said, it isn’t catastrophic to rely entirely on <code class="highlighter-rouge">Last-Modified</code> when serving truly static content.  If you set <code class="highlighter-rouge">Cache-Control</code> and <code class="highlighter-rouge">Expires</code> headers correctly, your users’ browsers and upstream proxies should cache the static content correctly.  You’ll all be seeing the right thing at more or less the right time.  It’s not optimal, however, and I’m using that as an excuse to play around with C again.</p>

<h2 id="introducing-nginx-static-etags">Introducing <code class="highlighter-rouge">nginx-static-etags</code></h2>

<p>It appears that the only way to add the functionality I’d like to see is to write an Nginx module (in C) and compile it into the server.  I’m in the process of doing that now, and I’m making relatively good progress on <a href="http://emiller.info/nginx-modules-guide.html"><code class="highlighter-rouge">nginx-static-etags</code></a> over on GitHub.  It’s been much harder than I expected, actually.  <a href="http://emiller.info/">Evan Miller</a> has put together an <a href="http://emiller.info/nginx-modules-guide.html">epic Nginx module-building tutorial</a> that I’ve had up constantly all week, but it turns out that I remember less C than I thought I did (and that the “C” that I remember is generally C++, which isn’t quite the same).</p>

<p>I certainly wouldn’t recommend that anyone run this in production yet, as, let’s be honest, the code’s likely a joke.  But after a week of tinkering and banging my head against GCC, it’s finally actually doing what it promises: generating valid <code class="highlighter-rouge">Etag</code> headers for static content.  There’s very little configuration available right now, but the goal is to get it up to feature parity with the <a href="http://httpd.apache.org/docs/1.3/mod/core.html#fileetag">equivalent Apache configuration option</a>.</p>

<p>It’s been a good learning experience for me, and it’s <a href="/2008/10/fallow-fields-and-new-beginnings">keeping me sane</a> (as side projects are wont to do).  <a href="http://github.com/mikewest/nginx-static-etags/tree">Follow along on GitHub</a> if you’re interested.</p>

<h2 id="installation">Installation</h2>

<p>Download the module however you like.  I’d recommend pulling it down with Git by simply cloning this repository:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir ~/src
cd    ~/src
git clone git://github.com/mikewest/nginx-static-etags.git ./nginx-static-etags
</code></pre></div></div>

<p>To use the module, you’ll have to compile it into Nginx.  So, download the Nginx source, configure it with the module path, and compile:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir ~/src
cd ~/src
curl -O http://sysoev.ru/nginx/nginx-0.6.32.tar.gz
tar -zxvf ./nginx-0.6.32.tar.gz
cd ./nginx-0.6.32
./configure --add-module=/Users/mikewest/Repositories/nginx-static-etags
make
sudo make install
</code></pre></div></div>

<p>And you’re done!</p>

<h2 id="configuration">Configuration</h2>

<p>Add <code class="highlighter-rouge">FileEtag</code> to the relevant <code class="highlighter-rouge">location</code> blocks in your <code class="highlighter-rouge">nginx.conf</code> file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location / {
    ...
    FileETag on;
    ...
}
</code></pre></div></div>

<h2 id="caveat">Caveat</h2>

<p><a href="http://intranation.com/">Brad’s</a> kinda right to <a href="http://github.com/mikewest/nginx-static-etags/commit/7dc32e124a8ba70d7bab733d68a8ef75f1b7d3b8#comments">question the value</a> of implementing <code class="highlighter-rouge">Etag</code>s at all: if you don’t generate them correctly you’ll do more harm than good.  Yahoo!’s Exceptional Performance team <a href="http://developer.yahoo.com/performance/rules.html#etags">explicitly recommends against using the <code class="highlighter-rouge">Etag</code> header</a> unless you know what you’re doing (which really boils down to ensuring that Apache doesn’t use the file’s <code class="highlighter-rouge">inode</code> to generate the key).  I think they’ve painted with a <em>really</em> broad brush, though, as YSlow’s admonitions against <code class="highlighter-rouge">Etag</code>s really only apply to the default configurations of Apache and IIS.  <code class="highlighter-rouge">Etag</code> can be a very valuable addition to the caching arsenal if you think about them; Yahoo!’s throwing the baby out with the bathwater.</p>

:ET